
- 用 Electron 將網頁遊戲轉換成 windows App
    這邊是針對你用 Vite + Phaser 3 的專案，轉成 Electron App 的範例：

    1. 安裝 Electron 相關套件
        npm install --save-dev electron electron-builder concurrently wait-on

    2. 建立 Electron 主程式 
        electron/main.js

    3. 在 package.json 新增以下設定:

        "main": "electron/main.js",
        "scripts": {
            "dev-app": "concurrently \"node log.js dev & vite --config vite/config.dev.mjs\" \"wait-on http://localhost:8080 && electron .\"",
            "build-app": "node log.js build & vite build --config vite/config.prod_app.mjs",
            "dist": "npm run build && electron-builder"
        },
        "build": {
            "appId": "com.yourname.yourapp",
            "files": [
                "dist",
                "electron"
            ],
            "directories": {
                "buildResources": "assets"
            }
        }

    4. 複製 vite/config.prod.mjs 到 vite/config.prod_app.mjs
        加入以下這行：
            import path from 'path';

        build 改成以下:
            build: {
                outDir: path.resolve(__dirname, '../dist'),
                emptyOutDir: true,
            },

    5. 開發 & 打包

        開發模式：
            npm run dev

        打包成桌面 App（會新增\dist目錄）：
            npm run dist

        執行打包後，會在 \dist 目錄下產生安裝檔，如: app_name Setup 1.3.2.exe
        執行後會產生以下兩個目錄，並在桌面新增一個捷徑
            C:\Users\bwm08\AppData\Local\Programs\app_name\
            C:\Users\bwm08\AppData\Roaming\app_name\

        app_name 定義在 package.json 的 name
        package.json
        {
            "name":"app_name" 
            ...
        }



- 將遊戲部署到網頁上
    部署到 GitHub Pages

    1. 安裝 deploy 工具
        npm install --save-dev gh-pages

    2. 在 package.json 新增以下設定
        "scripts": {
            "deploy": "npm run build && gh-pages -d frontend"
        }

    3. 一鍵發佈
        npm run deploy

        他會自動將 \frontend 上傳到 repository 的 gh-pages branch
        分享網頁:
        到 github 的 Pages 頁面，將 Branch 設成 gh-pages
        注意 : 要將 repository 設成 public
        網頁位址為 : https://帳號.github.io/repository名稱/


    
繼承 RexUI 的 class 裡面， 
不要用 this.getLayer() 來新增 layer，
這會導致 Ui scene 結束時，出現錯誤，因為 Layer 會先被清除，
之後再清除 layer 裡的 sprite，會從 layer 的 list 裡移除 sprite，
但此時 layer 已經被清除了，所以出先現問題 => properties of undefined (reading 'indexOf')

要用 let layer = scene.add.layer(); layer.add(this);  來新增 layer，
而且要放在 class 的最開始，這樣之後新增的 elment 才會加到 layer 裡面，
class 裡面如果有呼叫 scene.add.layer() 就不需要再呼叫 scene.add.exisiting(this)，
如果 新增layer 之後，再呼叫 scene.add.exisiting(this)，
則這個 class 及其下的 elemet 會同時出現在 layer 跟 DisplayList2





問題:
    在使用 electron-builder 打包時，遇到了這個令人煩惱的錯誤訊息：
        ❌ Cannot create symbolic link : A required privilege is not held by the client.
    這是因為在 Windows 系統中，建立符號連結（symlink）需要特別的權限。

解法: 
    以系統管理員身份執行命令提示字元或 VS Code
    請嘗試以下步驟：
        關閉目前的命令提示字元或 VS Code。
        右鍵點擊命令提示字元或 VS Code 的圖示。
        選擇「以系統管理員身份執行」。
        在新的視窗中，重新執行您的打包命令：
        npm run dist
    這樣可以確保您有足夠的權限來建立符號連結。





    美式中古世紀回合式 RPG
    1.裝備:
        近戰(melee): atk = atk + weapon_atk 
        遠程(ranged): atk = weapon_atk

    2.技能:
        主動、被動、冷卻時間、攻擊範圍、目標(單一/多個)
        BUFF、DEBUFF    (加減屬性)
        DOT             (受抗性影響、可疊加、刷新、忽略)

    3.攻擊屬性(element): physical(物理)、fire(火)、ice(冰)、poison(毒)

    4.基礎屬性(baseStats):
        str(力量): 20
        dex(敏捷): 10
        con(體質): 18
        int(智力): 5
        
    5.衍生屬性(derivedStats):
        hpMax(生命上限): base.con * 10
        mpMax(魔力上限): base.int * 5
        atk(攻擊): base.str * 5
        def(防禦): base.con * 1.2
        hit(命中率): base.dex * 0.5
        dodge(閃避率): base.dex * 0.3
        critRate(暴擊率): base.dex * 0.1
        critDmg(暴擊傷害倍率): 1.5

    6.屬性抗性（Resistances） 



 {
    baseStats:
    {
        str:10,
        dex:10,
        con:10,
        int:10
    }
 }

 function getDerivedStats()
 {

 }

